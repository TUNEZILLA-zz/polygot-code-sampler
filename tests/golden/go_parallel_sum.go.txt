import (
    "runtime"
    "sync"
)

func go_parallel_sum() int {
    numWorkers := runtime.NumCPU()
    chunkSize := (100 - 0) / numWorkers
    if chunkSize == 0 { chunkSize = 1 }

    results := make(chan int, numWorkers)
    var wg sync.WaitGroup

    for w := 0; w < numWorkers; w++ {{
        wg.Add(1)
        go func(workerID int) {{
            defer wg.Done()
            start := 0 + workerID * chunkSize
            end := start + chunkSize
            if workerID == numWorkers-1 { end = 100 }

            acc := 0
            for i := start; i < end; i += 1 {
                if !(i % 2 == 0) { continue }
                acc += i * i
            }
            results <- acc
        }(w)
    }

    wg.Wait()
    close(results)

    total := 0
    for result := range results {
        total += result
    }
    return total
}
