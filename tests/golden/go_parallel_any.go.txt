import (
    "runtime"
    "sync"
)

func go_parallel_any() bool {
    numWorkers := runtime.NumCPU()
    chunkSize := (100 - 0) / numWorkers
    if chunkSize == 0 { chunkSize = 1 }

    results := make(chan int, numWorkers)
    var wg sync.WaitGroup

    for w := 0; w < numWorkers; w++ {{
        wg.Add(1)
        go func(workerID int) {{
            defer wg.Done()
            start := 0 + workerID * chunkSize
            end := start + chunkSize
            if workerID == numWorkers-1 { end = 100 }

            acc := 0
            for x := start; x < end; x += 1 {
                if x > 50 { acc = 1; break }
            }
            results <- acc
        }(w)
    }

    wg.Wait()
    close(results)

    for result := range results {
        if result == 1 { return true }
    }
    return false
}