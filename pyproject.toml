[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "polyglot-code-sampler"
version = "0.3.1"
description = "Transform Python comprehensions across 5 ecosystems with parallel processing"
readme = "README.md"
license = "MIT"
authors = [
    {name = "TUNEZILLA", email = "brian@rawtunezmedia.com"}
]
maintainers = [
    {name = "TUNEZILLA", email = "brian@rawtunezmedia.com"}
]
keywords = [
    "python", "rust", "typescript", "csharp", "sql", "go",
    "comprehensions", "parallel", "transpiler", "polyglot",
    "code-generation", "performance", "enterprise"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Programming Language :: TypeScript",
    "Programming Language :: C#",
    "Programming Language :: SQL",
    "Programming Language :: Go",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
benchmark = [
    "criterion>=0.1.0",
    "matplotlib>=3.5.0",
    "pandas>=1.5.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
]

[project.urls]
Homepage = "https://github.com/TUNEZILLA-zz/polygot-code-sampler"
Documentation = "https://github.com/TUNEZILLA-zz/polygot-code-sampler#readme"
Repository = "https://github.com/TUNEZILLA-zz/polygot-code-sampler.git"
Issues = "https://github.com/TUNEZILLA-zz/polygot-code-sampler/issues"
Changelog = "https://github.com/TUNEZILLA-zz/polygot-code-sampler/blob/main/CHANGELOG.md"

[project.scripts]
pcs = "pcs.cli:main"

[project.gui-scripts]
pcs-gui = "pcs.gui:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pcs*"]

[tool.setuptools.package-data]
pcs = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"creative_performance_art.py" = ["W293", "W291"]
"stress_test_art.py" = ["W293", "W291"]
"vintage_cli.py" = ["W293", "W291"]
"pcs/vintage_profiles.py" = ["W293", "W291"]
"audio_fx_cli.py" = ["W293", "W291", "no-untyped-def"]
"pcs/audio_fx.py" = ["W293", "W291", "no-untyped-def", "assignment", "arg-type", "return-value"]
"pi_mode_cli.py" = ["W293", "W291", "no-untyped-def"]
"pcs/pi_mode.py" = ["W293", "W291", "no-untyped-def", "assignment", "arg-type", "return-value"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = ["creative_performance_art", "stress_test_art", "vintage_cli", "pcs.vintage_profiles", "audio_fx_cli", "pcs.audio_fx", "pi_mode_cli", "pcs.pi_mode"]
ignore_errors = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
]

[tool.coverage.run]
source = ["pcs"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]