name: Julia Backend Dev Workflow

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'pcs/backends/julia/**'
      - 'tests/fixtures/**'
      - 'tests/golden/julia/**'
      - 'scripts/test_*.py'
      - 'examples/julia/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'pcs/backends/julia/**'
      - 'tests/fixtures/**'
      - 'tests/golden/julia/**'
      - 'scripts/test_*.py'
      - 'examples/julia/**'
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  julia-backend-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -e .
    
    - name: Test Julia Backend
      run: |
        echo "🧪 Running Julia Backend Tests..."
        python -m pytest tests/test_one_ir_many_goldens.py -v
    
    - name: Test IR Fixture → 4 Goldens
      run: |
        echo "🧪 Testing IR Fixture → 4 Goldens Regression Safety Net..."
        python scripts/test_fixture_goldens.py
    
    - name: Test Differential Tests
      run: |
        echo "🧪 Running Differential Tests..."
        python scripts/test_differential.py

  julia-benchmarks:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: '1.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Run Julia Performance Benchmarks
      run: |
        echo "⚡ Running Julia Performance Benchmarks..."
        julia --project -e 'include("examples/julia/sanity_perf_check.jl")'
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: julia-benchmark-results
        path: |
          benchmark_*.txt
          *.jl
        retention-days: 30

  julia-integration:
    runs-on: ubuntu-latest
    needs: [julia-backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: '1.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Complete Dev Workflow
      run: |
        echo "🚀 Running Complete Julia Backend Dev Workflow..."
        make dev-workflow
    
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🧪 Julia Backend Dev Workflow Results\n\n';
          comment += '✅ All tests passed\n';
          comment += '✅ Regression safety net intact\n';
          comment += '✅ Performance benchmarks completed\n\n';
          comment += '🚀 Julia backend is ready for production!\n\n';
          comment += '### Test Coverage:\n';
          comment += '- ✅ IR Fixture → 4 Goldens regression safety net\n';
          comment += '- ✅ Differential tests (IR → Julia vs reference)\n';
          comment += '- ✅ Strategy selection validation\n';
          comment += '- ✅ Performance benchmarks\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  julia-nightly:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: '1.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Nightly Julia Backend Validation
      run: |
        echo "🌙 Nightly Julia Backend Validation..."
        echo "======================================"
        
        # Run comprehensive tests
        make dev-workflow
        
        # Generate performance report
        echo "📊 Performance Report:" > nightly_report.txt
        julia --project -e 'include("examples/julia/sanity_perf_check.jl")' >> nightly_report.txt 2>&1
        
        # Check for regressions
        echo "🔍 Regression Check:" >> nightly_report.txt
        python scripts/test_fixture_goldens.py >> nightly_report.txt 2>&1
        
        cat nightly_report.txt
    
    - name: Upload nightly report
      uses: actions/upload-artifact@v3
      with:
        name: julia-nightly-report
        path: nightly_report.txt
        retention-days: 90

