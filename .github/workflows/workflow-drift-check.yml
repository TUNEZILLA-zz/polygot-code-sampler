name: Workflow Drift Check
on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM
  workflow_dispatch:

jobs:
  drift-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Check pre-commit configuration
      run: |
        echo "🔍 Validating pre-commit configuration..."
        pre-commit validate-config

        echo "🔍 Checking for outdated hooks..."
        pre-commit autoupdate --dry-run

        # Check if autoupdate would change anything
        if pre-commit autoupdate --dry-run | grep -q "would update"; then
          echo "⚠️  Pre-commit hooks are outdated"
          echo "Run 'pre-commit autoupdate' locally and create a PR"
          exit 1
        else
          echo "✅ Pre-commit hooks are up to date"
        fi

    - name: Check tool versions
      run: |
        echo "🔍 Checking tool versions..."

        # Check if constraints.txt is up to date
        if [[ -f "constraints.txt" ]]; then
          echo "✅ constraints.txt exists"
        else
          echo "⚠️  constraints.txt missing - tool versions may drift"
        fi

        # Check for version mismatches
        echo "📊 Current tool versions:"
        pre-commit --version
        black --version
        ruff --version
        mypy --version

    - name: Create drift report
      if: failure()
      run: |
        echo "📊 Workflow Drift Report" > drift-report.md
        echo "======================" >> drift-report.md
        echo "" >> drift-report.md
        echo "## Issues Found" >> drift-report.md
        echo "- Pre-commit hooks may be outdated" >> drift-report.md
        echo "- Tool versions may have drifted" >> drift-report.md
        echo "" >> drift-report.md
        echo "## Recommended Actions" >> drift-report.md
        echo "1. Run 'pre-commit autoupdate' locally" >> drift-report.md
        echo "2. Update constraints.txt with new versions" >> drift-report.md
        echo "3. Test locally with 'pre-commit run --all-files'" >> drift-report.md
        echo "4. Create a PR with the updates" >> drift-report.md

    - name: Upload drift report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: drift-report
        path: drift-report.md
        retention-days: 7
