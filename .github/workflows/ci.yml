name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Run golden file tests
      run: |
        python -m pytest tests/test_golden.py -v

    - name: Test CLI functionality
      run: |
        python pcs_step3_ts.py --demo
        python pcs_step3_ts.py --code "test = [x**2 for x in range(5)]" --name "demo" --target rust
        python pcs_step3_ts.py --code "test = [x**2 for x in range(5)]" --name "demo" --target ts

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Run ruff (fast linting)
      run: |
        ruff check pcs_step3_ts.py tests/

    - name: Run black (code formatting check)
      run: |
        black --check pcs_step3_ts.py tests/

    - name: Run isort (import sorting check)
      run: |
        isort --check-only pcs_step3_ts.py tests/

    - name: Run mypy (type checking)
      run: |
        mypy pcs_step3_ts.py

  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Install Rust (for compilation benchmarks)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Install Node.js (for TypeScript benchmarks)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run quick benchmarks
      run: |
        python benchmark.py --quick --output benchmark_results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json
