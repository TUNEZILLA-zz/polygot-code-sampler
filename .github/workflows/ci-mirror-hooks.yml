name: CI Mirror Hooks
on:
  push:
    branches: [main, develop, 'fx-*']
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true  # Enable Git LFS

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'package.json'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pre-commit ruff black mypy pytest

    - name: Install Node.js dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
          npm install -g eslint prettier
        else
          echo "No package.json found, skipping Node.js dependencies"
        fi

    - name: Install pre-commit
      run: |
        pip install pre-commit
        pre-commit install --hook-type pre-commit --hook-type pre-push

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Run Python tests
      run: |
        pytest -q --tb=short
        mypy pcs/ --ignore-missing-imports

    - name: Run JavaScript/TypeScript linting
      run: |
        if [ -f package.json ]; then
          eslint "**/*.{js,ts,jsx,tsx}" --ext .js,.ts,.jsx,.tsx || echo "ESLint not configured, skipping"
          prettier --check "**/*.{js,ts,jsx,tsx,json,md}" || echo "Prettier not configured, skipping"
        else
          echo "No package.json found, skipping JavaScript/TypeScript linting"
        fi

    - name: Check for large files
      run: |
        # Check for files > 100MB
        find . -type f -size +100M -not -path './.git/*' -not -path './node_modules/*' | while read file; do
          echo "‚ùå Large file detected: $file"
          exit 1
        done
        echo "‚úÖ No large files detected"

    - name: Verify Git LFS
      run: |
        git lfs ls-files --errors
        echo "‚úÖ Git LFS verification passed"

    - name: Check for secrets
      run: |
        # Basic secret scanning
        if grep -r "sk-" . --exclude-dir=.git --exclude-dir=node_modules; then
          echo "‚ùå Potential secret detected"
          exit 1
        fi
        if grep -r "AKIA" . --exclude-dir=.git --exclude-dir=node_modules; then
          echo "‚ùå Potential AWS key detected"
          exit 1
        fi
        echo "‚úÖ No obvious secrets detected"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.node-version }}
        path: |
          .coverage
          test-results.xml
        retention-days: 7

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine

    - name: Build package
      run: |
        python -m build
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

    - name: Deploy to GitHub Pages (dry-run)
      if: github.event_name == 'push'
      run: |
        echo "üöÄ Would deploy to GitHub Pages"
        echo "üìä Would publish dashboard"
        echo "‚úÖ Build artifacts ready for deployment"
