#!/usr/bin/env node
/**
 * 🎭 Code Opera - Headless Capture
 * ================================
 * 
 * Capture screenshots of Code Opera harmony visualization.
 * Generates frames for video creation.
 */

const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function captureOpera(url = 'http://localhost:8787/out/opera/code_opera_harmony.html', options = {}) {
    const {
        outputDir = 'out/opera/snaps',
        duration = 15, // seconds
        fps = 30,
        width = 1920,
        height = 1080
    } = options;
    
    console.log('🎭 Code Opera - Headless Capture');
    console.log('=' * 50);
    console.log(`📹 Capturing: ${url}`);
    console.log(`⏱️  Duration: ${duration}s at ${fps}fps`);
    console.log(`📐 Resolution: ${width}x${height}`);
    
    // Create output directory
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const browser = await puppeteer.launch({
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        headless: true
    });
    
    try {
        const page = await browser.newPage();
        
        // Set viewport
        await page.setViewport({ width, height });
        
        // Navigate to URL
        console.log('🌐 Loading page...');
        await page.goto(url, { 
            waitUntil: 'networkidle2',
            timeout: 30000
        });
        
        // Wait for page to stabilize
        await page.waitForTimeout(2000);
        
        // Capture frames
        const totalFrames = duration * fps;
        console.log(`📸 Capturing ${totalFrames} frames...`);
        
        for (let i = 0; i < totalFrames; i++) {
            const frameNumber = String(i).padStart(4, '0');
            const filename = `frame_${frameNumber}.png`;
            const filepath = path.join(outputDir, filename);
            
            await page.screenshot({
                path: filepath,
                fullPage: false
            });
            
            if (i % 30 === 0) {
                console.log(`   📸 Frame ${i + 1}/${totalFrames}`);
            }
            
            // Wait for next frame
            await page.waitForTimeout(1000 / fps);
        }
        
        console.log(`✅ Captured ${totalFrames} frames to ${outputDir}`);
        
        // Generate frame list for video creation
        const frameList = [];
        for (let i = 0; i < totalFrames; i++) {
            const frameNumber = String(i).padStart(4, '0');
            frameList.push(`frame_${frameNumber}.png`);
        }
        
        const frameListFile = path.join(outputDir, 'frame_list.txt');
        fs.writeFileSync(frameListFile, frameList.join('\n'));
        
        console.log(`📝 Frame list saved: ${frameListFile}`);
        
        // Generate video creation script
        const ffmpegScript = `#!/bin/bash
# 🎭 Code Opera - Video Creation Script
# Generated by capture_opera.js

echo "🎬 Creating Code Opera video..."

# Create video from frames
ffmpeg -y -framerate ${fps} -i frame_%04d.png -c:v libx264 -pix_fmt yuv420p -crf 18 opera_performance.mp4

# Create GIF version
ffmpeg -y -framerate ${fps} -i frame_%04d.png -vf "fps=15,scale=640:-1:flags=lanczos" opera_performance.gif

echo "✅ Video created: opera_performance.mp4"
echo "✅ GIF created: opera_performance.gif"
`;
        
        const scriptFile = path.join(outputDir, 'create_video.sh');
        fs.writeFileSync(scriptFile, ffmpegScript);
        fs.chmodSync(scriptFile, '755');
        
        console.log(`🎬 Video script saved: ${scriptFile}`);
        console.log(`   Run: cd ${outputDir} && ./create_video.sh`);
        
    } catch (error) {
        console.error('❌ Capture failed:', error);
        process.exit(1);
    } finally {
        await browser.close();
    }
}

// Command line interface
async function main() {
    const args = process.argv.slice(2);
    const url = args[0] || 'http://localhost:8787/out/opera/code_opera_harmony.html';
    const duration = parseInt(args[1]) || 15;
    const fps = parseInt(args[2]) || 30;
    
    await captureOpera(url, { duration, fps });
}

// Run if called directly
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { captureOpera };

